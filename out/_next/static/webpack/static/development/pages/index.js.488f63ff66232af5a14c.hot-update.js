webpackHotUpdate("static/development/pages/index.js",{

/***/ "./components/Boxes.jsx":
/*!******************************!*\
  !*** ./components/Boxes.jsx ***!
  \******************************/
/*! exports provided: Box, ProductImageBox, Prototype, ModelsContainer, SummaryContainer, CaseStudiesContainer, StudyItemContainer, Item, SkillsContainer, Divider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Box", function() { return Box; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProductImageBox", function() { return ProductImageBox; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Prototype", function() { return Prototype; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModelsContainer", function() { return ModelsContainer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SummaryContainer", function() { return SummaryContainer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CaseStudiesContainer", function() { return CaseStudiesContainer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StudyItemContainer", function() { return StudyItemContainer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Item", function() { return Item; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SkillsContainer", function() { return SkillsContainer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Divider", function() { return Divider; });
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ "./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js");
/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! framer-motion */ "./node_modules/framer-motion/dist/framer-motion.es.js");
/* harmony import */ var _utils_theme__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/theme */ "./utils/theme.js");



var Box = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("div", {
  target: "e1w89ks00",
  label: "Box"
})("width:100%;display:flex;flex-direction:column;margin-top:", function (props) {
  return props.noPadTop ? "0" : "90px";
}, ";h2,h3{font-size:22px;font-weight:700;color:#6E819C;text-transform:uppercase;margin-bottom:40px;}h3{font-size:18px;margin-bottom:35px;}.grid .grid-item{overflow:hidden;border-radius:45px;}@media only screen and (max-width:1024px){margin-top:", function (props) {
  return props.noPadTop ? "0" : "35px";
}, ";h2,h3{font-size:18px;margin-bottom:20px;}h3{font-size:16px;}.grid{margin-bottom:80px;.grid-item{border-radius:30px;}}}@media only screen and (max-width:550px){h2,h3{font-size:14px;margin-bottom:20px;}h3{font-size:13px;}}" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var ProductImageBox = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("div", {
  target: "e1w89ks01",
  label: "ProductImageBox"
})("width:100%;display:flex;flex-direction:column;margin-top:", function (props) {
  return props.fullStudy ? "0px" : "100px";
}, ";margin-bottom:", function (props) {
  return props.fullStudy ? "50px" : "0px";
}, ";.block{display:flex;justify-content:space-between;&:first-of-type{margin-bottom:30px;}.section{div:first-of-type{margin-bottom:30px;", _utils_theme__WEBPACK_IMPORTED_MODULE_2__["cssShadowDefault"], ";}}.page-1{height:794px;overflow:hidden;border-radius:32px;", _utils_theme__WEBPACK_IMPORTED_MODULE_2__["cssShadowDefault"], ";&.persona{height:782px;}}.page-2{height:345px;overflow:hidden;border-radius:32px;", _utils_theme__WEBPACK_IMPORTED_MODULE_2__["cssShadowDefault"], ";&.persona{height:369px;}}.page-3{height:419px;overflow:hidden;border-radius:32px;", _utils_theme__WEBPACK_IMPORTED_MODULE_2__["cssShadowDefault"], ";&.persona{height:383px;.vertical-center{margin-top:-35px;}}}&.page-4{height:515px;overflow:hidden;border-radius:32px;", _utils_theme__WEBPACK_IMPORTED_MODULE_2__["cssShadowDefault"], ";&.persona{height:600px;}}}@media only screen and (max-width:1120px){margin-top:", function (props) {
  return props.fullStudy ? "0px" : "35px";
}, ";margin-bottom:", function (props) {
  return props.fullStudy ? "20px" : "0px";
}, ";.block{flex-direction:column;&:first-of-type{margin-bottom:0px;}.section{div:first-of-type{margin-bottom:20px;}}.page-1,.page-2,.page-3,&.page-4{width:100%;height:100%;margin-bottom:20px;border-radius:24px;&.persona{height:auto;}}&.page-4{margin-bottom:0px;&.persona{height:auto;}}}}" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var Prototype = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("a", {
  target: "e1w89ks02",
  label: "Prototype"
})("position:relative;height:515px;overflow:hidden;border-radius:32px;background:", function (props) {
  return props.project === "persona" ? "url(/persona/prototype.png)" : "url(/saia/prototype.png)";
}, ";background-position:center;margin-bottom:50px;", _utils_theme__WEBPACK_IMPORTED_MODULE_2__["cssShadowDefault"], ";.overlay{width:100%;height:100%;background-color:hsla(0,0%,0%,0.82);}.text{position:absolute;display:flex;flex-direction:column;justify-content:center;align-items:center;margin:auto;top:0;left:0;bottom:0;right:0;span{font-size:60px;font-weight:700;letter-spacing:1.28px;text-transform:uppercase;color:white;margin-bottom:30px;}.divider{width:335px;height:3px;border-radius:3px;background:white;}}@media only screen and (max-width:1024px){height:200px;border-radius:24px;background-size:cover;margin-bottom:20px;.text{span{font-size:20px;margin-bottom:10px;letter-spacing:0.43px;}.divider{width:110px;height:1px;}}}" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var ModelsContainer = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("div", {
  target: "e1w89ks03",
  label: "ModelsContainer"
})("display:flex;justify-content:space-between;.model{width:260px;height:210px;display:flex;flex-direction:column;justify-content:center;align-items:center;background-color:white;border-radius:32px;", _utils_theme__WEBPACK_IMPORTED_MODULE_2__["cssShadowDefault"], ";p{margin-top:18px;font-weight:700;font-size:20px;}}@media only screen and (max-width:1024px){.model:not(:last-of-type){margin-right:20px;}}@media only screen and (max-width:550px){.model{width:100px;height:110px;border-radius:12px;padding:12px;margin-right:0px;p{margin-top:8px;font-size:13px;text-align:center;line-height:initial;}}}" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var SummaryContainer = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("div", {
  target: "e1w89ks04",
  label: "SummaryContainer"
})("display:flex;justify-content:space-between;.model{width:330px;height:422px;display:flex;flex-direction:column;background-color:white;border-radius:32px;padding:30px 38px 0px 38px;", _utils_theme__WEBPACK_IMPORTED_MODULE_2__["cssShadowDefault"], ";.title{font-weight:700;font-size:16px;color:#000000;text-transform:uppercase;margin-top:20px;margin-bottom:30px;}ul{list-style:initial;color:#62748E;font-weight:500;font-size:16px;line-height:19px;padding-left:16px;span{font-weight:700;}li{margin-bottom:20px;&:last-child{margin-bottom:0;}}}}@media only screen and (max-width:1240px){.model{padding:30px 40px 0px 40px;&:not(:last-of-type){margin-right:20px;}}}@media only screen and (max-width:1024px){flex-direction:column;.model{width:100%;height:100%;padding:30px 25px 45px 25px;margin-bottom:20px;&:nth-of-type(3){margin-bottom:0px;}.title{font-size:20px;margin-top:15px;margin-bottom:20px;}ul{li{margin-bottom:15px;font-size:18px;&:last-child{margin-bottom:0;}}}}}@media only screen and (max-width:550px){.model{.title{font-size:15px;}ul{li{font-size:15px;}}}}" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var CaseStudiesContainer = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("div", {
  target: "e1w89ks05",
  label: "CaseStudiesContainer"
})("display:flex;justify-content:", function (props) {
  return props.full ? 'center' : 'space-between';
}, ";margin-bottom:", function (props) {
  return props.full ? '160px' : 'auto';
}, ";.case{width:", function (props) {
  return props.full ? '100%' : '490px';
}, ";height:", function (props) {
  return props.full ? '490px' : '369px';
}, ";display:flex;flex-direction:column;overflow:hidden;border-radius:45px;", _utils_theme__WEBPACK_IMPORTED_MODULE_2__["cssShadowDefault"], ";.img{width:100%;flex:1;background-size:cover;&.saia{background-image:url(\"saia-preview.png\");}&.persona{background-image:url(\"persona-preview.png\");}&.practice{background-image:url(\"practice-preview.png\");}}.info{width:100%;display:flex;align-items:center;justify-content:space-between;background:white;padding:25px 60px 25px 60px;p{font-size:28px;font-weight:700;color:#62748E;}.see-more{width:50px;height:50px;display:flex;justify-content:center;align-items:center;background:#0184E8;border-radius:14px;&.purple{background:#6420F5;}&.blue{background:#566eff;}}}}@media only screen and (max-width:1024px){flex-direction:column;justify-content:center;margin-bottom:", function (props) {
  return props.full ? '80px' : 'auto';
}, ";.case{width:100%;height:380px;border-radius:30px;&:nth-of-type(2){margin-top:20px;}.info{padding:17px 40px 17px 40px;p{font-size:22px;}.see-more{width:35px;height:35px;border-radius:10px;}}}}@media only screen and (max-width:550px){.case{height:252px;}p{font-size:18px;}}" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var StudyItemContainer = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("div", {
  target: "e1w89ks06",
  label: "StudyItemContainer"
})("width:100%;display:flex;flex-direction:column;align-items:center;background-color:white;border-radius:32px;padding:30px 40px 0px 40px;margin-bottom:", function (props) {
  return props.last ? "70px" : "50px";
}, ";", _utils_theme__WEBPACK_IMPORTED_MODULE_2__["cssShadowDefault"], ";> .ux-process{margin-top:38px;margin-bottom:60px;}.tag{align-self:flex-start;border-radius:15px;padding:11px 18px 7px 18px;background:#E7DDFD;font-size:12px;font-weight:700;text-transform:uppercase;color:#5A03B9;margin-bottom:30px;&.blue{background:#DBF0FF;color:#0084E8;}}.text{width:830px;font-size:18px;letter-spacing:0.38px;line-height:22px;text-align:center;margin-bottom:60px;&.solo{margin-top:20px;margin-bottom:50px;}.bold{font-weight:700;}}.stats{display:flex;justify-content:space-between;&.below-stats{width:715px;margin-top:60px;}.stat{display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center;.number{font-size:60px;font-weight:700;color:#62748E;letter-spacing:1.28px;margin-bottom:4px;}.label{font-size:18px;font-weight:500;color:#6E819C;letter-spacing:0.38;}}}.content{width:850px;margin-bottom:", function (props) {
  return props.mb ? props.mb : "80px";
}, ";& > .mask{display:flex;justify-content:center;}&.stats{.data{display:flex;flex-direction:column;justify-content:center;align-items:flex-end;.chart{display:flex;align-items:center;margin-bottom:12px;.label{font-size:12px;font-weight:700;color:#62748E;letter-spacing:0.26px;margin-right:15px;}.result{font-size:12px;font-weight:700;color:#62748E;letter-spacing:0.26px;margin-left:10px;&.ideas{margin-left:12px;}}}}}&.results{.stats{&.primary{justify-content:center;margin-bottom:83px;}&.medium{margin-bottom:100px;.number{font-size:50px;}}}.lessons{display:flex;justify-content:space-around;.model{width:330px;display:flex;flex-direction:column;padding:0px 5px 0px 38px;.title{font-weight:700;font-size:16px;color:#62748E;text-transform:uppercase;margin-top:20px;margin-bottom:30px;}ul{list-style:initial;color:#62748E;font-weight:500;font-size:16px;line-height:19px;padding-left:16px;span{font-weight:700;}li{margin-bottom:20px;&:last-child{margin-bottom:0;}}}}}}&.stacks{display:flex;justify-content:space-between;.stack{display:flex;flex-direction:column;align-items:center;.title{font-size:16px;font-weight:700;color:#62748E;text-transform:uppercase;margin-bottom:30px;}ul{li{display:flex;flex-direction:column;align-items:center;margin-bottom:25px;&:last-of-type{margin-bottom:0;}.logo{max-width:50px;margin-bottom:10px;}.label{max-width:120px;font-size:16px;font-weight:500;color:#62748E;text-align:center;}}}}}&.quotes{display:flex;flex-direction:column;align-items:center;.quotes-container{width:100%;display:flex;justify-content:space-between;margin-bottom:35px;.quote{width:366px;display:flex;align-items:flex-start;.icon{margin-right:auto;}p{width:354px;font-size:20px;letter-spacing:0.43px;text-align:center;margin-left:-34px;margin-top:10px;}}}.mask{overflow:hidden;border-radius:10px;}}}@media only screen and (max-width:1024px){padding:15px 25px 45px 25px;margin-bottom:", function (props) {
  return props.last ? "35px" : "20px";
}, ";& > .ux-process{margin-top:15px;margin-bottom:20px;& + img{max-width:490px;}}.text{width:100%;font-size:18px;margin-bottom:30px;text-align:left;&.solo{margin-top:15px;margin-bottom:-15px;}}.tag{align-self:flex-start;padding:8px 13px 5px 13px;font-size:15px;margin-bottom:15px;& + .solo{margin-top:0px;}}.stats{justify-content:center;&.below-stats{width:100%;flex-direction:row;justify-content:space-between;margin-top:40px;.stat{margin-bottom:0;}}&.content{width:100%;margin-bottom:0px;&.chart{.label{width:58px;}}}.stat{margin-bottom:20px;.number{font-size:40px;letter-spacing:0.40px;margin-bottom:12px;}.label{font-size:18px;letter-spacing:0.46px;&.full-width{max-width:80%;line-height:25px;}}}}.content{width:100%;margin-bottom:0px;&.stats{.data{align-items:center;.chart{margin-bottom:5px;.label{width:90px;font-size:17px;line-height:20px;text-align:right;}.result{font-size:17px;}}}}&.stacks{flex-direction:column;.stack{margin-bottom:70px;&:last-of-type{margin-bottom:0;}.title{align-self:flex-start;font-size:18px;margin-bottom:15px;}ul{width:100%;display:flex;align-items:flex-end;li{margin-bottom:0;margin-right:50px;&:last-of-type{margin-right:0;}.logo{max-height:50px;margin-bottom:10px;}.label{font-size:20px;}}}}}&.quotes{width:100%;.quotes-container{width:100%;display:flex;margin-bottom:20px;.quote{justify-content:center;.icon{margin-right:0;}p{width:250px;font-size:18px;margin-top:2px;margin-left:0px;br{display:none;}}}}}&.results{.stats{&.primary{margin-bottom:30px;.stat{margin-bottom:0px;p{line-height:initial;}}}&.medium{display:flex;justify-content:center;flex-direction:row;flex-wrap:wrap;margin-bottom:45px;.stat{width:50%;margin-bottom:0px;justify-content:flex-start;&:last-of-type{margin-top:30px;}}.number{margin-bottom:5px;font-size:28px;line-height:initial;}}}.lessons{display:flex;flex-direction:column;justify-content:flex-start;.model{width:100%;height:100%;padding:30px 25px 0px 25px;margin-bottom:0px;&:nth-of-type(3){margin-bottom:0px;}.title{font-size:18px;margin-top:0px;margin-bottom:20px;}ul{li{margin-bottom:15px;font-size:18px;&:last-child{margin-bottom:0;}}}}}}}@media only screen and (max-width:550px){.text{font-size:15px;}.tag{font-size:10px;}.stats{flex-direction:column;.stat{.number{font-size:40px;letter-spacing:0.26px;}.label{font-size:12px;letter-spacing:0.26px;max-width:143px;&.full-width{max-width:100%;line-height:15px;}}}}.content{&.stats{.data{.chart{.label{width:58px;font-size:12px;text-align:right;line-height:15px;}.result{font-size:12px;}}}}&.stacks{.stack{margin-bottom:33px;.title{font-size:12px;}ul{li{margin-right:16px;.logo{max-height:30px;margin-bottom:5px;}.label{font-size:12px;}}}}}&.quotes{.quotes-container{.quote{p{width:108px;font-size:12px;}}}}&.results{.stats{&.primary{.stat{p{line-height:initial;}}}&.medium{.number{margin-bottom:5px;font-size:24px;}}}.lessons{.model{.title{font-size:15px;}ul{li{font-size:15px;}}}}}" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var Item = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("img", {
  target: "e1w89ks07",
  label: "Item"
})("width:", function (props) {
  return props.width || "100%";
}, ";height:", function (props) {
  return props.height ? props.height : props.productImage ? "auto" : "100%";
}, ";margin-bottom:", function (props) {
  return props.mb || "auto";
}, ";" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qYW1lcy9jb2RlX3Byb2plY3RzL3BvcnRmb2xpby9jb21wb25lbnRzL0JveGVzLmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpbkM4QiIsImZpbGUiOiIvVXNlcnMvamFtZXMvY29kZV9wcm9qZWN0cy9wb3J0Zm9saW8vY29tcG9uZW50cy9Cb3hlcy5qc3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBtb3Rpb24gfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiO1xuaW1wb3J0IHsgY3NzU2hhZG93RGVmYXVsdCB9IGZyb20gJy4uL3V0aWxzL3RoZW1lJztcblxuZXhwb3J0IGNvbnN0IEJveCA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBtYXJnaW4tdG9wOiAke3Byb3BzID0+IHByb3BzLm5vUGFkVG9wID8gXCIwXCIgOiBcIjkwcHhcIn07XG5cbiAgaDIsIGgzIHtcbiAgICBmb250LXNpemU6IDIycHg7XG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICBjb2xvcjogIzZFODE5QztcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XG4gIH1cblxuICBoMyB7XG4gICAgZm9udC1zaXplOiAxOHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDM1cHg7XG4gIH1cblxuICAuZ3JpZCAuZ3JpZC1pdGVtIHtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIGJvcmRlci1yYWRpdXM6IDQ1cHg7XG4gIH1cblxuICAvKiBSRVNQT05TSVZFICovXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAyNHB4KSB7XG4gICAgbWFyZ2luLXRvcDogJHtwcm9wcyA9PiBwcm9wcy5ub1BhZFRvcCA/IFwiMFwiIDogXCIzNXB4XCJ9O1xuICAgIGgyLCBoMyB7XG4gICAgICBmb250LXNpemU6IDE4cHg7XG4gICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICAgIH1cblxuICAgIGgzIHtcbiAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICB9XG5cbiAgICAuZ3JpZCB7XG4gICAgICBtYXJnaW4tYm90dG9tOiA4MHB4O1xuICAgICAgLmdyaWQtaXRlbSB7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDMwcHg7XG4gICAgICB9XG4gICAgfVxuXG4gIH1cbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1NTBweCkge1xuICAgIGgyLCBoMyB7XG4gICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICAgIH1cblxuICAgIGgzIHtcbiAgICAgIGZvbnQtc2l6ZTogMTNweDtcbiAgICB9XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBQcm9kdWN0SW1hZ2VCb3ggPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiAxMDAlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBtYXJnaW4tdG9wOiAke3Byb3BzID0+IHByb3BzLmZ1bGxTdHVkeSA/IFwiMHB4XCIgOiBcIjEwMHB4XCJ9O1xuICAgIG1hcmdpbi1ib3R0b206ICR7cHJvcHMgPT4gcHJvcHMuZnVsbFN0dWR5ID8gXCI1MHB4XCIgOiBcIjBweFwifTtcblxuICAgIC5ibG9jayB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuXG4gICAgICAmOmZpcnN0LW9mLXR5cGUge1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICAgICAgfVxuXG4gICAgICAuc2VjdGlvbiB7XG4gICAgICAgIGRpdjpmaXJzdC1vZi10eXBlIHtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICAgICAgICAgICR7Y3NzU2hhZG93RGVmYXVsdH07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLnBhZ2UtMSB7XG4gICAgICAgIGhlaWdodDogNzk0cHg7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDMycHg7XG4gICAgICAgICR7Y3NzU2hhZG93RGVmYXVsdH07XG5cbiAgICAgICAgJi5wZXJzb25hIHtcbiAgICAgICAgICBoZWlnaHQ6IDc4MnB4O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC5wYWdlLTIge1xuICAgICAgICBoZWlnaHQ6IDM0NXB4O1xuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICBib3JkZXItcmFkaXVzOiAzMnB4O1xuICAgICAgICAke2Nzc1NoYWRvd0RlZmF1bHR9O1xuXG4gICAgICAgICYucGVyc29uYSB7XG4gICAgICAgICAgaGVpZ2h0OiAzNjlweDtcbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAgIC5wYWdlLTMge1xuICAgICAgICBoZWlnaHQ6IDQxOXB4O1xuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICBib3JkZXItcmFkaXVzOiAzMnB4O1xuICAgICAgICAke2Nzc1NoYWRvd0RlZmF1bHR9O1xuXG4gICAgICAgICYucGVyc29uYSB7XG4gICAgICAgICAgaGVpZ2h0OiAzODNweDtcblxuICAgICAgICAgIC52ZXJ0aWNhbC1jZW50ZXIge1xuICAgICAgICAgICAgbWFyZ2luLXRvcDogLTM1cHg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICYucGFnZS00IHtcbiAgICAgICAgaGVpZ2h0OiA1MTVweDtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMzJweDtcbiAgICAgICAgJHtjc3NTaGFkb3dEZWZhdWx0fTtcblxuICAgICAgICAmLnBlcnNvbmEge1xuICAgICAgICAgIGhlaWdodDogNjAwcHg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDExMjBweCkge1xuICAgICAgbWFyZ2luLXRvcDogJHtwcm9wcyA9PiBwcm9wcy5mdWxsU3R1ZHkgPyBcIjBweFwiIDogXCIzNXB4XCJ9O1xuICAgICAgbWFyZ2luLWJvdHRvbTogJHtwcm9wcyA9PiBwcm9wcy5mdWxsU3R1ZHkgPyBcIjIwcHhcIiA6IFwiMHB4XCJ9O1xuXG4gICAgICAuYmxvY2sge1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXG4gICAgICAgICY6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMHB4O1xuICAgICAgICB9XG5cbiAgICAgICAgLnNlY3Rpb24ge1xuICAgICAgICAgIGRpdjpmaXJzdC1vZi10eXBlIHtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLnBhZ2UtMSwgLnBhZ2UtMiwgLnBhZ2UtMywgJi5wYWdlLTQge1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDI0cHg7XG5cbiAgICAgICAgICAmLnBlcnNvbmEge1xuICAgICAgICAgICAgaGVpZ2h0OiBhdXRvO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgICYucGFnZS00IHtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwcHg7XG5cbiAgICAgICAgICAmLnBlcnNvbmEge1xuICAgICAgICAgICAgaGVpZ2h0OiBhdXRvO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbmBcblxuZXhwb3J0IGNvbnN0IFByb3RvdHlwZSA9IHN0eWxlZC5hYFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGhlaWdodDogNTE1cHg7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIGJvcmRlci1yYWRpdXM6IDMycHg7XG4gIGJhY2tncm91bmQ6ICR7cHJvcHMgPT4gcHJvcHMucHJvamVjdCA9PT0gXCJwZXJzb25hXCIgPyBcInVybCgvcGVyc29uYS9wcm90b3R5cGUucG5nKVwiIDogXCJ1cmwoL3NhaWEvcHJvdG90eXBlLnBuZylcIiB9O1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XG4gIG1hcmdpbi1ib3R0b206IDUwcHg7XG4gICR7Y3NzU2hhZG93RGVmYXVsdH07XG5cbiAgLm92ZXJsYXkge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2xhKDAsIDAlLCAwJSwgMC44Mik7XG4gIH1cblxuICAudGV4dCB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIG1hcmdpbjogYXV0bztcbiAgICB0b3A6IDA7IGxlZnQ6IDA7IGJvdHRvbTogMDsgcmlnaHQ6IDA7XG5cbiAgICBzcGFuIHtcbiAgICAgIGZvbnQtc2l6ZTogNjBweDtcbiAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgICBsZXR0ZXItc3BhY2luZzogMS4yOHB4O1xuICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XG4gICAgfVxuXG4gICAgLmRpdmlkZXIge1xuICAgICAgd2lkdGg6IDMzNXB4O1xuICAgICAgaGVpZ2h0OiAzcHg7XG4gICAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgICB9XG4gIH1cblxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjRweCkge1xuICAgIGhlaWdodDogMjAwcHg7XG4gICAgYm9yZGVyLXJhZGl1czogMjRweDtcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG5cblxuICAgIC50ZXh0IHtcbiAgICAgIHNwYW4ge1xuICAgICAgICBmb250LXNpemU6IDIwcHg7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgIGxldHRlci1zcGFjaW5nOiAwLjQzcHg7XG5cbiAgICAgIH1cblxuICAgICAgLmRpdmlkZXIge1xuICAgICAgICB3aWR0aDogMTEwcHg7XG4gICAgICAgIGhlaWdodDogMXB4O1xuICAgICAgfVxuICAgIH1cbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IE1vZGVsc0NvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcblxuICAubW9kZWwge1xuICAgIHdpZHRoOiAyNjBweDtcbiAgICBoZWlnaHQ6IDIxMHB4O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIGJvcmRlci1yYWRpdXM6IDMycHg7XG4gICAgJHtjc3NTaGFkb3dEZWZhdWx0fTtcblxuICAgIHAge1xuICAgICAgbWFyZ2luLXRvcDogMThweDtcbiAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgICBmb250LXNpemU6IDIwcHg7XG4gICAgfVxuICB9XG5cbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDI0cHgpIHtcbiAgICAubW9kZWw6bm90KDpsYXN0LW9mLXR5cGUpe1xuICAgICAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xuICAgIH1cbiAgfVxuXG5cbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1NTBweCkge1xuICAgIC5tb2RlbCB7XG4gICAgICB3aWR0aDogMTAwcHg7XG4gICAgICBoZWlnaHQ6IDExMHB4O1xuICAgICAgYm9yZGVyLXJhZGl1czogMTJweDtcbiAgICAgIHBhZGRpbmc6IDEycHg7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDBweDtcblxuICAgICAgcCB7XG4gICAgICAgIG1hcmdpbi10b3A6IDhweDtcbiAgICAgICAgZm9udC1zaXplOiAxM3B4O1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiBpbml0aWFsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IFN1bW1hcnlDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgLm1vZGVsIHtcbiAgICB3aWR0aDogMzMwcHg7XG4gICAgaGVpZ2h0OiA0MjJweDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgYm9yZGVyLXJhZGl1czogMzJweDtcbiAgICBwYWRkaW5nOiAzMHB4IDM4cHggMHB4IDM4cHg7XG4gICAgJHtjc3NTaGFkb3dEZWZhdWx0fTtcblxuICAgIC50aXRsZSB7XG4gICAgICBmb250LXdlaWdodDogNzAwO1xuICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgY29sb3I6ICMwMDAwMDA7XG4gICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgbWFyZ2luLXRvcDogMjBweDtcbiAgICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XG4gICAgfVxuXG4gICAgdWwge1xuICAgICAgbGlzdC1zdHlsZTogaW5pdGlhbDtcbiAgICAgIGNvbG9yOiAjNjI3NDhFO1xuICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgIGxpbmUtaGVpZ2h0OiAxOXB4O1xuICAgICAgcGFkZGluZy1sZWZ0OiAxNnB4O1xuXG4gICAgICBzcGFuIHtcbiAgICAgICAgICBmb250LXdlaWdodDogNzAwO1xuICAgICAgfVxuXG4gICAgICBsaSB7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG5cbiAgICAgICAgJjpsYXN0LWNoaWxkIHtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEyNDBweCkge1xuICAgIC5tb2RlbCB7XG4gICAgICBwYWRkaW5nOiAzMHB4IDQwcHggMHB4IDQwcHg7XG4gICAgICAmOm5vdCg6bGFzdC1vZi10eXBlKSB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMjBweDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjRweCkge1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cbiAgICAubW9kZWwge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICBwYWRkaW5nOiAzMHB4IDI1cHggNDVweCAyNXB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDtcblxuICAgICAgJjpudGgtb2YtdHlwZSgzKSB7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDBweDtcbiAgICAgIH1cblxuICAgICAgLnRpdGxlIHtcbiAgICAgICAgZm9udC1zaXplOiAyMHB4O1xuICAgICAgICBtYXJnaW4tdG9wOiAxNXB4O1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICAgICAgfVxuXG4gICAgICB1bCB7XG5cbiAgICAgICAgbGkge1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XG4gICAgICAgICAgZm9udC1zaXplOiAxOHB4O1xuXG4gICAgICAgICAgJjpsYXN0LWNoaWxkIHtcbiAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDU1MHB4KSB7XG4gICAgLm1vZGVsIHtcbiAgICAgIC50aXRsZSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTVweDtcbiAgICAgIH1cblxuICAgICAgdWwge1xuICAgICAgICBsaSB7XG4gICAgICAgICAgZm9udC1zaXplOiAxNXB4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgQ2FzZVN0dWRpZXNDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6ICR7cHJvcHMgPT4gcHJvcHMuZnVsbCA/ICdjZW50ZXInIDogJ3NwYWNlLWJldHdlZW4nfTtcbiAgbWFyZ2luLWJvdHRvbTogJHtwcm9wcyA9PiBwcm9wcy5mdWxsID8gJzE2MHB4JyA6ICdhdXRvJ307XG5cbiAgLmNhc2Uge1xuICAgIHdpZHRoOiAke3Byb3BzID0+IHByb3BzLmZ1bGwgPyAnMTAwJScgOiAnNDkwcHgnfTtcbiAgICBoZWlnaHQ6ICR7cHJvcHMgPT4gcHJvcHMuZnVsbCA/ICc0OTBweCcgOiAnMzY5cHgnfTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBib3JkZXItcmFkaXVzOiA0NXB4O1xuICAgICR7Y3NzU2hhZG93RGVmYXVsdH07XG5cbiAgICAuaW1nIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgZmxleDogMTtcbiAgICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG5cbiAgICAgICYuc2FpYSB7XG4gICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcInNhaWEtcHJldmlldy5wbmdcIik7XG4gICAgICB9XG4gICAgICAmLnBlcnNvbmEge1xuICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCJwZXJzb25hLXByZXZpZXcucG5nXCIpO1xuICAgICAgfVxuICAgICAgJi5wcmFjdGljZSB7XG4gICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcInByYWN0aWNlLXByZXZpZXcucG5nXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAuaW5mbyB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgYmFja2dyb3VuZDogd2hpdGU7XG4gICAgICBwYWRkaW5nOiAyNXB4IDYwcHggMjVweCA2MHB4O1xuXG4gICAgICBwIHtcbiAgICAgICAgZm9udC1zaXplOiAyOHB4O1xuICAgICAgICBmb250LXdlaWdodDogNzAwO1xuICAgICAgICBjb2xvcjogIzYyNzQ4RTtcbiAgICAgIH1cblxuICAgICAgLnNlZS1tb3JlIHtcbiAgICAgICAgd2lkdGg6IDUwcHg7XG4gICAgICAgIGhlaWdodDogNTBweDtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGJhY2tncm91bmQ6ICMwMTg0RTg7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDE0cHg7XG5cbiAgICAgICAgJi5wdXJwbGUge1xuICAgICAgICAgIGJhY2tncm91bmQ6ICM2NDIwRjU7XG4gICAgICAgIH1cblxuICAgICAgICAmLmJsdWUge1xuICAgICAgICAgIGJhY2tncm91bmQ6ICM1NjZlZmY7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuXG5cblxuICAvKiBSRVNQT05TSVZFICovXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAyNHB4KSB7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBtYXJnaW4tYm90dG9tOiAke3Byb3BzID0+IHByb3BzLmZ1bGwgPyAnODBweCcgOiAnYXV0byd9O1xuXG4gICAgLmNhc2Uge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDM4MHB4O1xuICAgICAgYm9yZGVyLXJhZGl1czogMzBweDtcbiAgICAgICY6bnRoLW9mLXR5cGUoMikge1xuICAgICAgICBtYXJnaW4tdG9wOiAyMHB4O1xuICAgICAgfVxuXG4gICAgICAuaW5mbyB7XG4gICAgICAgIHBhZGRpbmc6IDE3cHggNDBweCAxN3B4IDQwcHg7XG5cbiAgICAgICAgcCB7XG4gICAgICAgICAgZm9udC1zaXplOiAyMnB4O1xuICAgICAgICB9XG5cbiAgICAgICAgLnNlZS1tb3JlIHtcbiAgICAgICAgICB3aWR0aDogMzVweDtcbiAgICAgICAgICBoZWlnaHQ6IDM1cHg7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSAgXG5cbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1NTBweCkge1xuICAgIC5jYXNlIHtcbiAgICAgIGhlaWdodDogMjUycHg7XG4gICAgfVxuXG4gICAgcCB7XG4gICAgICBmb250LXNpemU6IDE4cHg7XG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgU3R1ZHlJdGVtQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogMTAwJTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICBib3JkZXItcmFkaXVzOiAzMnB4O1xuICAgIHBhZGRpbmc6IDMwcHggNDBweCAwcHggNDBweDtcbiAgICBtYXJnaW4tYm90dG9tOiAke3Byb3BzID0+IHByb3BzLmxhc3QgPyBcIjcwcHhcIiA6IFwiNTBweFwifTtcbiAgICAke2Nzc1NoYWRvd0RlZmF1bHR9O1xuXG4gICAgPiAudXgtcHJvY2VzcyB7XG4gICAgICBtYXJnaW4tdG9wOiAzOHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogNjBweDtcbiAgICB9XG5cbiAgICAudGFnIHtcbiAgICAgIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XG4gICAgICBib3JkZXItcmFkaXVzOiAxNXB4O1xuICAgICAgcGFkZGluZzogMTFweCAxOHB4IDdweCAxOHB4O1xuICAgICAgYmFja2dyb3VuZDogI0U3RERGRDtcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgY29sb3I6ICM1QTAzQjk7XG4gICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICAgICAgXG4gICAgICAmLmJsdWUge1xuICAgICAgICBiYWNrZ3JvdW5kOiAjREJGMEZGO1xuICAgICAgICBjb2xvcjogIzAwODRFODtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAudGV4dCB7XG4gICAgICB3aWR0aDogODMwcHg7XG4gICAgICBmb250LXNpemU6IDE4cHg7XG4gICAgICBsZXR0ZXItc3BhY2luZzogMC4zOHB4O1xuICAgICAgbGluZS1oZWlnaHQ6IDIycHg7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBtYXJnaW4tYm90dG9tOiA2MHB4O1xuICAgICAgXG4gICAgICAmLnNvbG8ge1xuICAgICAgICBtYXJnaW4tdG9wOiAyMHB4O1xuICAgICAgICBtYXJnaW4tYm90dG9tOiA1MHB4O1xuICAgICAgfVxuXG4gICAgICAuYm9sZCB7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLnN0YXRzIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgICAgICYuYmVsb3ctc3RhdHMge1xuICAgICAgICB3aWR0aDogNzE1cHg7XG4gICAgICAgIG1hcmdpbi10b3A6IDYwcHg7XG4gICAgICB9XG5cbiAgICAgIC5zdGF0IHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICAgICAgICAubnVtYmVyIHtcbiAgICAgICAgICBmb250LXNpemU6IDYwcHg7XG4gICAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICAgICAgICBjb2xvcjogIzYyNzQ4RTtcbiAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMS4yOHB4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDRweDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5sYWJlbCB7XG4gICAgICAgICAgZm9udC1zaXplOiAxOHB4O1xuICAgICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgICAgICAgY29sb3I6ICM2RTgxOUM7XG4gICAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDAuMzg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAuY29udGVudCB7XG4gICAgICB3aWR0aDogODUwcHg7XG4gICAgICBtYXJnaW4tYm90dG9tOiAke3Byb3BzID0+IHByb3BzLm1iID8gcHJvcHMubWIgOiBcIjgwcHhcIn07XG5cbiAgICAgICYgPiAubWFzayB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgfVxuXG4gICAgICAvKiBNQVJLRVQgUkVTRUFSQ0ggKi9cbiAgICAgICYuc3RhdHMge1xuXG4gICAgICAgIC5kYXRhIHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtZW5kO1xuXG4gICAgICAgICAgLmNoYXJ0IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTJweDtcblxuICAgICAgICAgICAgLmxhYmVsIHtcbiAgICAgICAgICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgICAgICAgICBmb250LXdlaWdodDogNzAwO1xuICAgICAgICAgICAgICBjb2xvcjogIzYyNzQ4RTtcbiAgICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDAuMjZweDtcbiAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxNXB4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAucmVzdWx0IHtcbiAgICAgICAgICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgICAgICAgICBmb250LXdlaWdodDogNzAwO1xuICAgICAgICAgICAgICBjb2xvcjogIzYyNzQ4RTtcbiAgICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDAuMjZweDtcbiAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDEwcHg7XG5cbiAgICAgICAgICAgICAgJi5pZGVhcyB7XG4gICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDEycHg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyogUkVTVUxUUyAqL1xuICAgICAgJi5yZXN1bHRzIHtcbiAgICAgICAgLnN0YXRzIHtcbiAgICAgICAgICAmLnByaW1hcnkge1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA4M3B4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgICYubWVkaXVtIHtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwMHB4O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAubnVtYmVyIHtcbiAgICAgICAgICAgICAgZm9udC1zaXplOiA1MHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC5sZXNzb25zIHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuXG4gICAgICAgICAgLm1vZGVsIHtcbiAgICAgICAgICAgIHdpZHRoOiAzMzBweDtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgICAgcGFkZGluZzogMHB4IDVweCAwcHggMzhweDtcblxuICAgICAgICAgICAgLnRpdGxlIHtcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNzAwO1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgICAgICAgICAgICBjb2xvcjogIzYyNzQ4RTtcbiAgICAgICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDIwcHg7XG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdWwge1xuICAgICAgICAgICAgICAgIGxpc3Qtc3R5bGU6IGluaXRpYWw7XG4gICAgICAgICAgICAgICAgY29sb3I6ICM2Mjc0OEU7XG4gICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDE5cHg7XG4gICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAxNnB4O1xuXG4gICAgICAgICAgICAgICAgc3BhbiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGkge1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuXG4gICAgICAgICAgICAgICAgICAgICY6bGFzdC1jaGlsZCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKiBTVEFDSyAqL1xuICAgICAgJi5zdGFja3Mge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgICAgICAgLnN0YWNrIHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAgICAgICAgIC50aXRsZSB7XG4gICAgICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogNzAwO1xuICAgICAgICAgICAgY29sb3I6ICM2Mjc0OEU7XG4gICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB1bCB7XG4gICAgICAgICAgICBsaSB7XG4gICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDI1cHg7XG5cbiAgICAgICAgICAgICAgJjpsYXN0LW9mLXR5cGUge1xuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAubG9nbyB7XG4gICAgICAgICAgICAgICAgbWF4LXdpZHRoOiA1MHB4O1xuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAubGFiZWwge1xuICAgICAgICAgICAgICAgIG1heC13aWR0aDogMTIwcHg7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgICAgICAgICAgICAgY29sb3I6ICM2Mjc0OEU7XG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgICAgLyogUVVPVEVTICovXG5cbiAgICAgICYucXVvdGVzIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAgICAgICAucXVvdGVzLWNvbnRhaW5lciB7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMzVweDtcblxuICAgICAgICAgIC5xdW90ZSB7XG4gICAgICAgICAgICB3aWR0aDogMzY2cHg7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG5cbiAgICAgICAgICAgIC5pY29uIHtcbiAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwIHtcbiAgICAgICAgICAgICAgd2lkdGg6IDM1NHB4O1xuICAgICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XG4gICAgICAgICAgICAgIGxldHRlci1zcGFjaW5nOiAwLjQzcHg7XG4gICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IC0zNHB4O1xuICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC5tYXNrIHtcbiAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjRweCkge1xuICAgICAgcGFkZGluZzogMTVweCAyNXB4IDQ1cHggMjVweDtcbiAgICAgIG1hcmdpbi1ib3R0b206ICR7cHJvcHMgPT4gcHJvcHMubGFzdCA/IFwiMzVweFwiIDogXCIyMHB4XCJ9O1xuXG4gICAgICAmID4gLnV4LXByb2Nlc3Mge1xuICAgICAgICBtYXJnaW4tdG9wOiAxNXB4O1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuXG4gICAgICAgICYgKyBpbWcge1xuICAgICAgICAgIG1heC13aWR0aDogNDkwcHg7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLnRleHQge1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgZm9udC1zaXplOiAxOHB4O1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuXG4gICAgICAgICYuc29sbyB7XG4gICAgICAgICAgbWFyZ2luLXRvcDogMTVweDtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAtMTVweDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAudGFnIHtcbiAgICAgICAgYWxpZ24tc2VsZjogZmxleC1zdGFydDtcbiAgICAgICAgcGFkZGluZzogOHB4IDEzcHggNXB4IDEzcHg7XG4gICAgICAgIGZvbnQtc2l6ZTogMTVweDtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMTVweDtcblxuICAgICAgICAmICsgLnNvbG8ge1xuICAgICAgICAgIG1hcmdpbi10b3A6IDBweDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAuc3RhdHMge1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblxuICAgICAgICAmLmJlbG93LXN0YXRzIHtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgICBtYXJnaW4tdG9wOiA0MHB4O1xuXG4gICAgICAgICAgLnN0YXQge1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAmLmNvbnRlbnQge1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDBweDtcblxuICAgICAgICAgICYuY2hhcnQge1xuICAgICAgICAgICAgLmxhYmVsIHtcbiAgICAgICAgICAgICAgd2lkdGg6IDU4cHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLnN0YXQge1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gICAgICAgICAgLm51bWJlciB7XG4gICAgICAgICAgICBmb250LXNpemU6IDQwcHg7XG4gICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMC40MHB4O1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTJweDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAubGFiZWwge1xuICAgICAgICAgICAgZm9udC1zaXplOiAxOHB4O1xuICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDAuNDZweDtcblxuICAgICAgICAgICAgJi5mdWxsLXdpZHRoIHtcbiAgICAgICAgICAgICAgbWF4LXdpZHRoOiA4MCU7XG4gICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyNXB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAuY29udGVudCB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAwcHg7XG5cbiAgICAgICAgJi5zdGF0cyB7XG4gICAgICAgICAgLmRhdGEge1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgIC5jaGFydCB7XG4gICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDVweDtcbiAgICAgICAgICAgICAgLmxhYmVsIHtcbiAgICAgICAgICAgICAgICB3aWR0aDogOTBweDtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDE3cHg7XG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAucmVzdWx0IHtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDE3cHg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAmLnN0YWNrcyB7XG4gICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblxuICAgICAgICAgIC5zdGFjayB7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA3MHB4O1xuXG4gICAgICAgICAgICAmOmxhc3Qtb2YtdHlwZSB7XG4gICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC50aXRsZSB7XG4gICAgICAgICAgICAgIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTVweDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdWwge1xuICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtZW5kO1xuICAgICAgICAgICAgICBsaSB7XG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDUwcHg7XG5cbiAgICAgICAgICAgICAgICAmOmxhc3Qtb2YtdHlwZSB7XG4gICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLmxvZ28ge1xuICAgICAgICAgICAgICAgICAgbWF4LWhlaWdodDogNTBweDtcbiAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLmxhYmVsIHtcbiAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAmLnF1b3RlcyB7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG5cbiAgICAgICAgICAucXVvdGVzLWNvbnRhaW5lciB7XG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuXG4gICAgICAgICAgICAucXVvdGUge1xuICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgICAgLmljb24ge1xuICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHAge1xuICAgICAgICAgICAgICAgIHdpZHRoOiAyNTBweDtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDE4cHg7XG4gICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMnB4O1xuICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwcHg7XG4gICAgICAgICAgICAgICAgYnIge1xuICAgICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAmLnJlc3VsdHMge1xuICAgICAgICAuc3RhdHMge1xuICAgICAgICAgICYucHJpbWFyeSB7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuXG4gICAgICAgICAgICAuc3RhdCB7XG4gICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDBweDtcbiAgICAgICAgICAgICAgcCB7XG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IGluaXRpYWw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAmLm1lZGl1bSB7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgICAgICAgICAgZmxleC13cmFwOiB3cmFwO1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogNDVweDtcblxuICAgICAgICAgICAgLnN0YXQge1xuICAgICAgICAgICAgICB3aWR0aDogNTAlO1xuICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwcHg7XG4gICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcblxuICAgICAgICAgICAgICAmOmxhc3Qtb2YtdHlwZSB7XG4gICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMzBweDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAubnVtYmVyIHtcbiAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogNXB4O1xuICAgICAgICAgICAgICBmb250LXNpemU6IDI4cHg7XG4gICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiBpbml0aWFsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC5sZXNzb25zIHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuXG4gICAgICAgICAgLm1vZGVsIHtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgcGFkZGluZzogMzBweCAyNXB4IDBweCAyNXB4O1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMHB4O1xuXG4gICAgICAgICAgICAmOm50aC1vZi10eXBlKDMpIHtcbiAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMHB4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAudGl0bGUge1xuICAgICAgICAgICAgICBmb250LXNpemU6IDE4cHg7XG4gICAgICAgICAgICAgIG1hcmdpbi10b3A6IDBweDtcbiAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdWwge1xuXG4gICAgICAgICAgICAgIGxpIHtcbiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDtcblxuICAgICAgICAgICAgICAgICY6bGFzdC1jaGlsZCB7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAgIH1cbiAgICB9XG5cbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDU1MHB4KSB7XG5cbiAgICAgIC50ZXh0IHtcbiAgICAgICAgZm9udC1zaXplOiAxNXB4O1xuICAgICAgfVxuXG4gICAgICAudGFnIHtcbiAgICAgICAgZm9udC1zaXplOiAxMHB4O1xuICAgICAgfVxuXG4gICAgICAuc3RhdHMge1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAuc3RhdCB7XG4gICAgICAgICAgLm51bWJlciB7XG4gICAgICAgICAgICBmb250LXNpemU6IDQwcHg7XG4gICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMC4yNnB4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC5sYWJlbCB7XG4gICAgICAgICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMC4yNnB4O1xuICAgICAgICAgICAgbWF4LXdpZHRoOiAxNDNweDtcblxuICAgICAgICAgICAgJi5mdWxsLXdpZHRoIHtcbiAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMTVweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLmNvbnRlbnQge1xuXG4gICAgICAgICYuc3RhdHMge1xuICAgICAgICAgIC5kYXRhIHtcbiAgICAgICAgICAgIC5jaGFydCB7XG4gICAgICAgICAgICAgIC5sYWJlbCB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDU4cHg7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxNXB4O1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLnJlc3VsdCB7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgJi5zdGFja3Mge1xuICAgICAgICAgIC5zdGFjayB7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzM3B4O1xuICAgICAgICAgICAgLnRpdGxlIHtcbiAgICAgICAgICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB1bCB7XG4gICAgICAgICAgICAgIGxpIHtcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG4gICAgICAgICAgICAgICAgLmxvZ28ge1xuICAgICAgICAgICAgICAgICAgbWF4LWhlaWdodDogMzBweDtcbiAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDVweDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLmxhYmVsIHtcbiAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAmLnF1b3RlcyB7XG4gICAgICAgICAgLnF1b3Rlcy1jb250YWluZXIge1xuICAgICAgICAgICAgLnF1b3RlIHtcbiAgICAgICAgICAgICAgcCB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwOHB4O1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgICYucmVzdWx0cyB7XG4gICAgICAgIC5zdGF0cyB7XG4gICAgICAgICAgJi5wcmltYXJ5IHtcbiAgICAgICAgICAgIC5zdGF0IHtcbiAgICAgICAgICAgICAgcCB7XG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IGluaXRpYWw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAmLm1lZGl1bSB7XG4gICAgICAgICAgICAubnVtYmVyIHtcbiAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogNXB4O1xuICAgICAgICAgICAgICBmb250LXNpemU6IDI0cHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLmxlc3NvbnMge1xuICAgICAgICAgIC5tb2RlbCB7XG4gICAgICAgICAgICAudGl0bGUge1xuICAgICAgICAgICAgICBmb250LXNpemU6IDE1cHg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHVsIHtcbiAgICAgICAgICAgICAgbGkge1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTVweDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgfVxuICAgIH1cbmBcblxuZXhwb3J0IGNvbnN0IEl0ZW0gPSBzdHlsZWQuaW1nYFxuICAgIHdpZHRoOiAke3Byb3BzID0+IHByb3BzLndpZHRoIHx8IFwiMTAwJVwifTtcbiAgICBoZWlnaHQ6ICR7cHJvcHMgPT4gcHJvcHMuaGVpZ2h0ID8gcHJvcHMuaGVpZ2h0IDogcHJvcHMucHJvZHVjdEltYWdlID8gXCJhdXRvXCIgOiBcIjEwMCVcIn07XG4gICAgbWFyZ2luLWJvdHRvbTogJHtwcm9wcyA9PiBwcm9wcy5tYiB8fCBcImF1dG9cIn07XG5gXG5cbmV4cG9ydCBjb25zdCBTa2lsbHNDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMTAwJTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC13cmFwOiB3cmFwO1xuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgYm9yZGVyLXJhZGl1czogNDVweDtcbiAgcGFkZGluZzogMTAwcHggMHB4IDEwMHB4IDBweDtcbiAgJHtjc3NTaGFkb3dEZWZhdWx0fTtcblxuICAuc2tpbGwge1xuICAgIGZsZXgtZ3JvdzogMTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgd2lkdGg6IDMzJTtcbiAgICBoZWlnaHQ6IDE3MHB4O1xuXG4gICAgJjpudGgtY2hpbGQoLW4rMykge1xuICAgICAgbWFyZ2luLWJvdHRvbTogNjBweDtcbiAgICB9XG5cbiAgICAmLnV4IC5pY29uIHtcbiAgICAgIGJhY2tncm91bmQ6ICNGRkQ5Qzc7XG4gICAgfVxuXG4gICAgJi5wc3kgLmljb24ge1xuICAgICAgYmFja2dyb3VuZDogI0ZGRUZCMztcbiAgICB9XG5cbiAgICAmLnVpIC5pY29uIHtcbiAgICAgIGJhY2tncm91bmQ6ICNDQ0Q1RkY7XG4gICAgfVxuXG4gICAgJi5tYXJrZXQgLmljb24ge1xuICAgICAgYmFja2dyb3VuZDogI0I2RURERTtcbiAgICB9XG5cbiAgICAmLmVuZyAuaWNvbiB7XG4gICAgICBiYWNrZ3JvdW5kOiAjRTFDOEVGO1xuICAgIH1cblxuICAgICYuZW50cmUgLmljb24ge1xuICAgICAgYmFja2dyb3VuZDogI0I4RThGQTtcbiAgICB9XG5cbiAgICAuaWNvbiB7XG4gICAgICB3aWR0aDogMTIxcHg7XG4gICAgICBoZWlnaHQ6IDEyMXB4O1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDIzcHg7XG4gICAgfVxuXG4gICAgcCB7XG4gICAgICBmb250LXdlaWdodDogNzAwO1xuICAgICAgY29sb3I6ICM2Mjc0OEU7XG4gICAgfVxuICB9XG5cbiAgLyogUkVTUE9OU0lWRSAqL1xuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjRweCkge1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuICAgIGJvcmRlci1yYWRpdXM6IDMwcHg7XG4gICAgcGFkZGluZzogMzBweDtcblxuICAgICY6bnRoLWNoaWxkKC1uKzMpIHtcbiAgICAgIG1hcmdpbi1ib3R0b206IDBweDtcbiAgICB9XG5cblxuICAgIC5za2lsbCB7XG4gICAgICB3aWR0aDogNTAlO1xuICAgICAgaGVpZ2h0OiA5MXB4O1xuXG4gICAgICAuaWNvbiB7XG4gICAgICAgIHdpZHRoOiA2NHB4O1xuICAgICAgICBoZWlnaHQ6IDY0cHg7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDEycHg7XG4gICAgICB9XG5cbiAgICAgICBwIHtcbiAgICAgICAgIGZvbnQtc2l6ZTogMTNweDtcbiAgICAgICB9XG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgRGl2aWRlciA9IHN0eWxlZChtb3Rpb24uZGl2LCB7IGV4Y2x1ZGVQcm9wczogWydibHVlJ10gfSlgXG4gIHdpZHRoOiAzMDBweDtcbiAgaGVpZ2h0OiA0cHg7XG4gIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiBwcm9wcy5ibHVlID8gJyNEMUU2RkYnIDogJyNFN0RERkQnIH07XG4gIG1hcmdpbjogOTBweCBhdXRvIDkwcHggYXV0bztcblxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjRweCkge1xuICAgIG1hcmdpbjogNDBweCBhdXRvIDQwcHggYXV0bztcbiAgfVxuYDtcblxuIl19 */"));
var SkillsContainer = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("div", {
  target: "e1w89ks08",
  label: "SkillsContainer"
})("width:100%;display:flex;flex-wrap:wrap;background:white;border-radius:45px;padding:100px 0px 100px 0px;", _utils_theme__WEBPACK_IMPORTED_MODULE_2__["cssShadowDefault"], ";.skill{flex-grow:1;display:flex;flex-direction:column;align-items:center;justify-content:space-between;width:33%;height:170px;&:nth-child(-n+3){margin-bottom:60px;}&.ux .icon{background:#FFD9C7;}&.psy .icon{background:#FFEFB3;}&.ui .icon{background:#CCD5FF;}&.market .icon{background:#B6EDDE;}&.eng .icon{background:#E1C8EF;}&.entre .icon{background:#B8E8FA;}.icon{width:121px;height:121px;display:flex;justify-content:center;align-items:center;border-radius:23px;}p{font-weight:700;color:#62748E;}}@media only screen and (max-width:1024px){justify-content:space-around;border-radius:30px;padding:30px;&:nth-child(-n+3){margin-bottom:0px;}.skill{width:50%;height:91px;.icon{width:64px;height:64px;border-radius:12px;}p{font-size:13px;}}}" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var Divider = /*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])(framer_motion__WEBPACK_IMPORTED_MODULE_1__["motion"].div, {
  excludeProps: ['blue'],
  target: "e1w89ks09",
  label: "Divider"
})("width:300px;height:4px;border-radius:5px;background:", function (props) {
  return props.blue ? '#D1E6FF' : '#E7DDFD';
}, ";margin:90px auto 90px auto;@media only screen and (max-width:1024px){margin:40px auto 40px auto;}" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

/***/ })

})
//# sourceMappingURL=index.js.488f63ff66232af5a14c.hot-update.js.map